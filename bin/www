#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app   = require('../app');
var debug = require('debug')('confusion:server');
var http  = require('http');

var provider_location = require('../socket_controllers/provider_location');
var customer_location = require('../socket_controllers/customer_location');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort( process.env.PORT || process.env.LOCAL_PORT_DEV );
app.set('port', port);                    
app.set('securePort', port + 443);
/**
 * Create HTTP server.
 */

var server  = http.createServer(app);
var io      = require('socket.io').listen(server, {
  pingTimeout: 30000,
  pingInterval: 30000
});
io.set('transports', ['websocket']);
/** 
 * Listen on provided port, on all network interfaces.
 */
global.io = io;

app.io = io.sockets.on('connection', (socket) => {
  console.log(`Socket ${socket.id} connected.`);
  socket.on('disconnect', () => {
    if(socket.type == 'provider'){
      console.log('disconnected provider', socket.id);
      provider_location.updateProviderStatus( socket.id );
    }
    else if( socket.type == 'customer' ){
      console.log('disconnected customer');
      customer_location.updateCustomerStatus( socket.id );
    }
   else console.log('disconnected without type')
  });

  // all redux dispatched actions will be catched here  
  socket.on('action', (action) => {

    if(action.type == 'server/update-location'){
      if(action.payload.userType == 'provider' ){
        socket.type = 'provider';
        provider_location.updateProviderLocation( action.payload, socket.id );
      }
      if(action.payload.userType == 'customer'){
        socket.type = 'customer';
        customer_location.updateCustomerLocation( action.payload, socket.id );
        console.log(action.payload);
        provider_location.returnNearbyProviders( action.payload ).then(data => {
          socket.emit('action', {type:'GET_NEARBY_PROVIDERS', data:data});
        });        
      }
    }
  });
});


server.listen(port, '0.0.0.0');
// server.listen(port)
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
